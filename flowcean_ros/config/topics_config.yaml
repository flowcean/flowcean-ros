#                             ===========================================
#                             HOW TO DEFINE INPUT TOPICS FOR flowcean_ros
#                             ===========================================
#
# Structure:
# input_topics:
#   "<topic_name>":
#     - single_msg: <true/false>  # Optional, specify if the topic only contains a single message to grab
#     - include:  # Optional, specify fields to include
#       - "<field_name>"
#     - exclude:  # Optional, specify fields to exclude
#       - "<field_name>"
#     - qos_profile: "<profile_name>"  # Optional, specify QoS profile
#     - threshold: <value>  # Optional, specify individual threshold for the topic to be considered valid
#
# Note:
# -> Msg types are detected automatically based on the topic name.
# -> If include and exclude are not specified, flowcean_ros will subscribe to the entire message.
# -> Use either include or exclude. If both are specified, flowcean_ros prioritizes include.
#
#                             ===========================================
#                             HOW TO DEFINE OUTPUT TOPIC FOR flowcean_ros
#                             ===========================================
#
# Structure:
# output_topic:
#   - name: "<output_topic_name>"  # Name of the output topic
#   - msg_type: "<message_type>"  # Type of the message to be published
#   - qos_profile: "<profile_name>"  # QoS profile for the output topic

input_topics:
  "/turtle1/cmd_vel":
    include:
      - "linear.x"
      - "angular.z"
    qos_profile: "SENSOR_DATA"
    threshold: 1.0
  "/turtle1/pose":
    include:
      - "x"
      - "y"
      - "theta"
    qos_profile: "SENSOR_DATA"
    threshold: 1.0
    
output_topics:
  "/output":
    type: "turtlesim/msg/Pose"
    map:
      "x" : "/turtle1/pose/x_next"  
      "y" : "/turtle1/pose/y_next"  
      "theta" : "/turtle1/pose/theta_next"
    qos_profile: "SENSOR_DATA"
    frequency: 0.1
# output_topics:
#   "/output":
#     type: "geometry.msg.pose"
#     map:
#       "pose.pose.position.x" : "x_next"  
#       "pose.pose.position.y" : "y_next"  
#       "pose.pose.orientation.x": "helper"  
#       "pose.pose.orientation.y": "helper"  
#       "pose.pose.orientation.z": "helper"  
#       "pose.pose.orientation.w": "helper"  
#       helper: [euler_to_quaternion", ["next_yaw"]]
#     qos_profile: "SENSOR_DATA"
#     frequency: 0.1
